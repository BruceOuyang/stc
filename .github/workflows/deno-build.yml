# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow will install Deno then run `deno lint` and `deno test`.
# For more information see: https://github.com/denoland/setup-deno

name: DenoBuild

on:
  push:
    branches: ['master']
  pull_request:
    branches: ['master']

permissions:
  contents: read

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Setup repo
        uses: actions/checkout@v3

      - name: Setup Deno
        # uses: denoland/setup-deno@v1
        uses: denoland/setup-deno@85bf53342c32efa9c468dfd17ba8978c6571730f
        with:
          deno-version: v1.x

      - name: Extract Current Tag
        id: extract_tag
        run: echo "TAG=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          echo "TAG=${GITHUB_REF#refs/tags/}"

      # Uncomment this step to verify the use of 'deno fmt' on each commit.
      - name: Verify formatting
        run: deno fmt --check

      - name: Run linter
        run: deno lint

      - name: Run tests
        run: deno test -A

      # 执行编译命令
      - name: Run compile mac
        run: deno task build:mac
      - name: Run compile mac M
        run: deno task build:mac-m
      - name: Run compile windows
        run: deno task build:win
      - name: Run compile linux
        run: deno task build:linux

      # 列出编译后的文件
      # - name: List compiled files
      #   id: list_files
      #   run: |
      #     find ./release -type f > files.txt

      # 获取目录中的文件名
      - name: Get file names
        id: get_file_names
        run: |
          file_names=$(find ./release -type f)
          file_names_with_newlines=$(echo "$file_names" | tr '\n' ',')
          echo "FILE_NAMES=$file_names_with_newlines" >> $GITHUB_ENV

      # 获取文件目录中的文件类型
      - name: Get file types
        id: get_file_types
        run: |
          file_types=$(file --mime-type -b ./release/*)
          file_types_with_newlines=$(echo "$file_types" | tr '\n' ',')
          echo "FILE_TYPES=$file_types_with_newlines" >> $GITHUB_ENV

      # 创建 Release
      # - name: Create release
      #   # if: startsWith(github.ref, 'refs/tags/')
      #   id: create_release
      #   uses: actions/create-release@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     tag_name: ${{ env.TAG }}
      #     release_name: Release${{ env.TAG }}
      #     draft: false
      #     prerelease: false

      # # 上传 Release 里的资产
      # - name: Upload Release Asset
      #   id: upload_release_asset
      #   uses: actions/upload-release-asset@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     upload_url: ${{ steps.create_release.outputs.upload_url }}
      #     asset_path: './release/*'
      #     asset_name: ${{ env.FILE_NAMES }} # ${{ steps.list_files.outputs.files }}
      #     asset_content_type: ${{ env.FILE_TYPES }}
